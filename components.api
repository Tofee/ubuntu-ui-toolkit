Base 0.1 1.0
Empty
    property variant icon
    property url fallbackIconSource
    property string fallbackIconName
    property bool progression
    property bool iconFrame
    property real __iconWidth
    property real __iconHeight
    property real __leftIconMargin
    property real __rightIconMargin
    property bool __iconIsItem
    default property internal children
Caption 0.1 1.0
Item
    property string text
Divider 0.1 1.0
Image
Empty 0.1 1.0
AbstractButton
    property bool selected
    property bool highlightWhenPressed
    property bool removable
    property bool confirmRemoval
    readonly property string swipingState
    readonly property bool waitingConfirmationForRemoval
    signal itemRemoved
    property int __height
    property bool showDivider
    default property internal children
    property internal __contents
    property list<Item> backgroundIndicator
    property ThinDivider divider
    property real __contentsMargins
    function cancelItemRemoval()
Expandable 0.1 1.0
Empty
    property bool expanded
    property real collapsedHeight
    property real expandedHeight
    property bool collapseOnClick
    default property QtObject children
ExpandablesColumn 0.1 1.0
Flickable
    readonly property Item expandedItem
    function expandItem(item)
    function collapse()
    default property QtObject children
Header 0.1 1.0
Item
    property string text
    property internal __foregroundColor
ItemSelector 0.1 1.0
ListItem.Empty
    property var model
    property bool expanded
    property bool multiSelection
    property bool colourImage
    property Component delegate
    property real containerHeight
    property int selectedIndex
    property bool currentlyExpanded
    readonly property real itemHeight
    signal delegateClicked(int index)
    signal expansionCompleted()
MultiValue 0.1 1.0
Base
    property variant values
SingleControl 0.1 1.0
Empty
    property Item control
    function __updateControl()
SingleValue 0.1 1.0
Base
    property string value
Standard 0.1 1.0
Empty
    property variant icon
    property url fallbackIconSource
    property string fallbackIconName
    property bool progression
    property real __iconWidth
    property real __iconHeight
    property real __leftIconMargin
    property real __rightIconMargin
    property Item control
    property bool iconFrame
    property bool __controlAreaPressed
    property bool __iconIsItem
    property internal __foregroundColor
Subtitled 0.1 1.0
Base
    property string subText
ThinDivider 0.1 1.0
Rectangle
    property bool __lightBackground
ValueSelector 0.1 1.0
Empty
    property variant icon
    property url fallbackIconSource
    property string fallbackIconName
    property real __iconWidth
    property real __iconHeight
    property real __leftIconMargin
    property real __rightIconMargin
    property bool iconFrame
    property variant values
    property int selectedIndex
    property bool expanded
DatePicker 0.1 1.0
StyledItem
    property string mode
    property date date
    property date minimum
    property date maximum
    readonly property int year
    readonly property int month
    readonly property int day
    readonly property int week
    readonly property int hours
    readonly property int minutes
    readonly property int seconds
    property var locale
    readonly property bool moving
Dialer 0.1 1.0
StyledItem
    property real minimumValue
    property real maximumValue
    property real size
    property real handSpace
    readonly property Item centerItem
    property list<var> centerContent
    readonly property list<DialerHands> hands
    signal handUpdated(var hand)
DialerHand 0.1 1.0
StyledItem
    property real value
    property DialerHandGroup hand
    readonly property Dialer dialer
    default property list<QtObject> overlay
    readonly property int index
    property internal __grabber
Picker 0.1 1.0
StyledItem
    property bool circular
    property var model
    property Component delegate
    property int selectedIndex
    property bool live
    readonly property bool moving
    function positionViewAtIndex(index)
    property int __clickedIndex
PickerDelegate 0.1 1.0
AbstractButton
    readonly property Picker picker
PickerPanel 0.1 1.0
Object
    function openDatePicker(caller, property, mode)
ActionSelectionPopover 0.1 1.0
Popover
    property Item target
    property var actions
    property Component delegate
ComposerSheet 0.1 1.0
SheetBase
    signal cancelClicked
    signal confirmClicked
DefaultSheet 0.1 1.0
SheetBase
    property bool doneButton
    signal closeClicked
    signal doneClicked
Dialog 0.1 1.0
PopupBase
    default property list<Object> contents
    property string title
    property string text
    property Item caller
    property Item pointerTarget
    property real edgeMargins
    property real callerMargin
    property bool modal
Popover 0.1 1.0
PopupBase
    default property list<Object> container
    property real contentWidth
    property real contentHeight
    property Item caller
    property Item pointerTarget
    property real edgeMargins
    property real callerMargin
    property bool autoClose
    property Component foregroundStyle
    function show()
    function hide()
    function __makeInvisible()
PopupBase 0.1 1.0
OrientationHelper
    property Item dismissArea
    property bool grabDismissAreaEvents
    property PropertyAnimation fadingAnimation
    function show()
    function hide()
    function __closeIfHidden()
    function __closePopup()
    property Item __foreground
    property bool __closeOnDismissAreaPress
    property internal __dimBackground
    property internal __eventGrabber
SheetBase 0.1 1.0
PopupBase
    default property list<Object> container
    property real contentsWidth
    property real contentsHeight
    property string title
    property bool modal
    property internal __leftButton
    property internal __rightButton
ComboButtonStyle 1.1
Item
    property real dropDownWidth
    property real dropDownSeparatorWidth
    property real comboListMargin
    property Item comboListHolder
    property Item comboListPanel
    property color defaultColor
    property Gradient defaultGradient
    property color defaultDropdownColor
    property font defaultFont
PageHeadStyle 1.1
Item
    property real contentHeight
    property url separatorSource
    property url separatorBottomSource
    property string fontSize
    property int fontWeight
    property color textColor
    property real textLeftMargin
    property int maximumNumberOfActions
PullToRefreshStyle 1.1
Item
    property Component defaultContent
    property real activationThreshold
    property bool releaseToRefresh
Palette 0.1
QtObject
    property PaletteValues normal
    property PaletteValues selected
PaletteValues 0.1
QtObject
    property color background
    property color backgroundText
    property color base
    property color baseText
    property color foreground
    property color foregroundText
    property color overlay
    property color overlayText
    property color field
    property color fieldText
    property color selection
PerformanceOverlay 0.1 1.0
Item
    property bool active
UbuntuTestCase 0.1 1.0
TestCase
    function findChild(obj,objectName)
    function findInvisibleChild(obj,objectName)
    function findChildWithProperty(item, property, value)
    function centerOf(item)
    function mouseMoveSlowly(item,x,y,dx,dy,steps,stepdelay)
    function flick(item, x, y, dx, dy, pressTimeout, steps, button, modifiers, delay)
    function mouseLongPress(item, x, y, button, modifiers, delay)
    function tryCompareFunction(func, expectedResult, timeout)
    function typeString(string)
plugins.qmltypes
    name: "FilterBehavior"
    prototype: "QObject"
    exports: ["FilterBehavior 1.1"]
    Property { name: "property"; type: "string" }
    Property { name: "pattern"; type: "QRegExp" }
    name: "InverseMouseAreaType"
    prototype: "QQuickMouseArea"
    exports: ["InverseMouseArea 0.1", "InverseMouseArea 1.0"]
    Property { name: "sensingArea"; type: "QQuickItem"; isPointer: true }
    Property { name: "topmostItem"; type: "bool" }
    Method {
    name: "contains"
    Parameter { name: "point"; type: "QPointF" }
    name: "QAbstractProxyModel"
    prototype: "QAbstractItemModel"
    Property { name: "sourceModel"; type: "QAbstractItemModel"; isPointer: true }
    name: "QSortFilterProxyModel"
    prototype: "QAbstractProxyModel"
    Property { name: "filterRegExp"; type: "QRegExp" }
    Property { name: "filterKeyColumn"; type: "int" }
    Property { name: "dynamicSortFilter"; type: "bool" }
    Property { name: "filterCaseSensitivity"; type: "Qt::CaseSensitivity" }
    Property { name: "sortCaseSensitivity"; type: "Qt::CaseSensitivity" }
    Property { name: "isSortLocaleAware"; type: "bool" }
    Property { name: "sortRole"; type: "int" }
    Property { name: "filterRole"; type: "int" }
    Method {
    name: "setFilterRegExp"
    Parameter { name: "pattern"; type: "string" }
    Method {
    name: "setFilterWildcard"
    Parameter { name: "pattern"; type: "string" }
    Method {
    name: "setFilterFixedString"
    Parameter { name: "pattern"; type: "string" }
    Method { name: "clear" }
    Method { name: "invalidate" }
    name: "QSortFilterProxyModelQML"
    prototype: "QSortFilterProxyModel"
    exports: ["SortFilterModel 1.1"]
    Property { name: "model"; type: "QAbstractItemModel"; isPointer: true }
    Property { name: "count"; type: "int"; isReadonly: true }
    Property { name: "sort"; type: "SortBehavior"; isReadonly: true; isPointer: true }
    Property { name: "filter"; type: "FilterBehavior"; isReadonly: true; isPointer: true }
    Method {
    name: "get"
    Parameter { name: "row"; type: "int" }
    Method { name: "count"; type: "int" }
    name: "ShapeItem"
    prototype: "QQuickItem"
    exports: [
    name: "HAlignment"
    name: "VAlignment"
    Property { name: "color"; type: "QColor" }
    Property { name: "gradientColor"; type: "QColor" }
    Property { name: "radius"; type: "string" }
    Property { name: "image"; type: "QVariant" }
    Property { name: "stretched"; type: "bool" }
    Property { name: "horizontalAlignment"; type: "HAlignment" }
    Property { name: "verticalAlignment"; type: "VAlignment" }
    Property { name: "borderSource"; type: "string" }
    Signal { name: "borderChanged" }
    Method { name: "gridUnitChanged" }
    name: "SortBehavior"
    prototype: "QObject"
    exports: ["SortBehavior 1.1"]
    Property { name: "property"; type: "string" }
    Property { name: "order"; type: "Qt::SortOrder" }
    name: "UCAction"
    prototype: "QObject"
    exports: ["Action 0.1", "Action 1.0"]
    name: "Type"
    Property { name: "name"; type: "string" }
    Property { name: "text"; type: "string" }
    Property { name: "iconName"; type: "string" }
    Property { name: "description"; type: "string" }
    Property { name: "keywords"; type: "string" }
    Property { name: "enabled"; type: "bool" }
    Property { name: "parameterType"; type: "Type" }
    Property { name: "iconSource"; type: "QUrl" }
    Property { name: "visible"; type: "bool" }
    Property { name: "itemHint"; type: "QQmlComponent"; isPointer: true }
    Signal {
    name: "triggered"
    Parameter { name: "value"; type: "QVariant" }
    Method {
    name: "trigger"
    Parameter { name: "value"; type: "QVariant" }
    Method { name: "trigger" }
    name: "UCActionContext"
    prototype: "QObject"
    exports: ["ActionContext 0.1", "ActionContext 1.0"]
    Property { name: "actions"; type: "QObject"; isList: true; isReadonly: true }
    Property { name: "active"; type: "bool" }
    Signal {
    name: "activeChanged"
    Parameter { type: "bool" }
    Method {
    name: "addAction"
    Parameter { name: "action"; type: "QObject"; isPointer: true }
    Method {
    name: "removeAction"
    Parameter { name: "action"; type: "QObject"; isPointer: true }
    name: "UCActionManager"
    prototype: "QObject"
    exports: ["ActionManager 0.1", "ActionManager 1.0"]
    Property { name: "actions"; type: "QObject"; isList: true; isReadonly: true }
    Property { name: "localContexts"; type: "QObject"; isList: true; isReadonly: true }
    Property { name: "globalContext"; type: "UCActionContext"; isReadonly: true; isPointer: true }
    Signal { name: "quit" }
    Method {
    name: "addAction"
    Parameter { name: "action"; type: "QObject"; isPointer: true }
    Method {
    name: "removeAction"
    Parameter { name: "action"; type: "QObject"; isPointer: true }
    Method {
    name: "addLocalContext"
    Parameter { name: "context"; type: "QObject"; isPointer: true }
    Method {
    name: "removeLocalContext"
    Parameter { name: "context"; type: "QObject"; isPointer: true }
    name: "UCAlarm"
    prototype: "QObject"
    exports: ["Alarm 0.1", "Alarm 1.0"]
    name: "Status"
    name: "Operation"
    name: "Error"
    name: "AlarmType"
    name: "DayOfWeek"
    name: "DaysOfWeek"
    Property { name: "enabled"; type: "bool" }
    Property { name: "message"; type: "string" }
    Property { name: "date"; type: "QDateTime" }
    Property { name: "type"; type: "AlarmType" }
    Property { name: "daysOfWeek"; type: "DaysOfWeek" }
    Property { name: "sound"; type: "QUrl" }
    Property { name: "error"; type: "int"; isReadonly: true }
    Property { name: "status"; type: "Status"; isReadonly: true }
    Signal {
    name: "statusChanged"
    Parameter { name: "operation"; type: "Operation" }
    Method { name: "save" }
    Method { name: "cancel" }
    Method { name: "reset" }
    name: "UCAlarmModel"
    prototype: "QAbstractListModel"
    exports: ["AlarmModel 0.1", "AlarmModel 1.0"]
    Property { name: "count"; type: "int"; isReadonly: true }
    Method {
    name: "get"
    Parameter { name: "index"; type: "int" }
    name: "UCArgument"
    prototype: "QObject"
    exports: ["Argument 0.1", "Argument 1.0"]
    Property { name: "name"; type: "string" }
    Property { name: "help"; type: "string" }
    Property { name: "required"; type: "bool" }
    Property { name: "valueNames"; type: "QStringList" }
    Method {
    name: "at"
    Parameter { name: "i"; type: "int" }
    name: "UCArguments"
    prototype: "QObject"
    exports: ["Arguments 0.1", "Arguments 1.0"]
    Property { name: "defaultArgument"; type: "UCArgument"; isPointer: true }
    Property { name: "arguments"; type: "UCArgument"; isList: true; isReadonly: true }
    Property { name: "values"; type: "QQmlPropertyMap"; isReadonly: true; isPointer: true }
    Property { name: "error"; type: "bool"; isReadonly: true }
    Property { name: "errorMessage"; type: "string"; isReadonly: true }
    Method { name: "printUsage" }
    Method {
    name: "quitWithError"
    Parameter { name: "errorMessage"; type: "string" }
    Method { name: "quitWithError" }
    name: "UCInverseMouse"
    prototype: "UCMouse"
    exports: ["InverseMouse 0.1", "InverseMouse 1.0"]
    name: "UCMouse"
    prototype: "QObject"
    exports: ["Mouse 0.1", "Mouse 1.0"]
    name: "Priority"
    Property { name: "enabled"; type: "bool" }
    Property { name: "acceptedButtons"; type: "Qt::MouseButtons"; isReadonly: true }
    Property { name: "hoverEnabled"; type: "bool"; isReadonly: true }
    Property { name: "clickAndHoldThreshold"; type: "int" }
    Property { name: "forwardTo"; type: "QQuickItem"; isList: true; isReadonly: true }
    Property { name: "priority"; type: "Priority" }
    Signal {
    name: "pressed"
    Parameter { name: "mouse"; type: "QQuickMouseEvent"; isPointer: true }
    Parameter { name: "host"; type: "QQuickItem"; isPointer: true }
    Signal {
    name: "released"
    Parameter { name: "mouse"; type: "QQuickMouseEvent"; isPointer: true }
    Parameter { name: "host"; type: "QQuickItem"; isPointer: true }
    Signal {
    name: "clicked"
    Parameter { name: "mouse"; type: "QQuickMouseEvent"; isPointer: true }
    Parameter { name: "host"; type: "QQuickItem"; isPointer: true }
    Signal {
    name: "pressAndHold"
    Parameter { name: "mouse"; type: "QQuickMouseEvent"; isPointer: true }
    Parameter { name: "host"; type: "QQuickItem"; isPointer: true }
    Signal {
    name: "doubleClicked"
    Parameter { name: "mouse"; type: "QQuickMouseEvent"; isPointer: true }
    Parameter { name: "host"; type: "QQuickItem"; isPointer: true }
    Signal {
    name: "positionChanged"
    Parameter { name: "mouse"; type: "QQuickMouseEvent"; isPointer: true }
    Parameter { name: "host"; type: "QQuickItem"; isPointer: true }
    Signal {
    name: "entered"
    Parameter { name: "event"; type: "QQuickMouseEvent"; isPointer: true }
    Parameter { name: "host"; type: "QQuickItem"; isPointer: true }
    Signal {
    name: "exited"
    Parameter { name: "event"; type: "QQuickMouseEvent"; isPointer: true }
    Parameter { name: "host"; type: "QQuickItem"; isPointer: true }
    name: "UCQQuickImageExtension"
    prototype: "QQuickImageBase"
    exports: ["QQuickImageBase 0.1", "QQuickImageBase 1.0"]
    Property { name: "source"; type: "QUrl" }
    Signal {
    name: "sourceChanged"
    Parameter { type: "QUrl" }
    Signal {
    name: "sourceChanged"
    Parameter { type: "QUrl" }
    name: "UCStateSaver"
    prototype: "QObject"
    exports: ["StateSaver 0.1", "StateSaver 1.0"]
    name: "UCStateSaverAttached"
    prototype: "QObject"
    Property { name: "enabled"; type: "bool" }
    Property { name: "properties"; type: "string" }
    name: "UCStyledItemBase"
    prototype: "QQuickItem"
    exports: [
    Property { name: "activeFocusOnPress"; revision: 1; type: "bool" }
    Method {
    name: "requestFocus"
    Parameter { name: "reason"; type: "Qt::FocusReason" }
    Method { name: "requestFocus"; revision: 1; type: "bool" }
    name: "UCUbuntuAnimation"
    prototype: "QObject"
    exports: ["UbuntuAnimation 0.1", "UbuntuAnimation 1.0"]
    Property { name: "SnapDuration"; type: "int"; isReadonly: true }
    Property { name: "FastDuration"; type: "int"; isReadonly: true }
    Property { name: "BriskDuration"; type: "int"; isReadonly: true }
    Property { name: "SlowDuration"; type: "int"; isReadonly: true }
    Property { name: "SleepyDuration"; type: "int"; isReadonly: true }
    Property { name: "StandardEasing"; type: "QEasingCurve"; isReadonly: true }
    Property { name: "StandardEasingReverse"; type: "QEasingCurve"; isReadonly: true }
    name: "UCUnits"
    prototype: "QObject"
    exports: ["UCUnits 0.1", "UCUnits 1.0"]
    Property { name: "gridUnit"; type: "float" }
    Method {
    name: "dp"
    Parameter { name: "value"; type: "float" }
    Method {
    name: "gu"
    Parameter { name: "value"; type: "float" }
    name: "UCUriHandler"
    prototype: "QObject"
    exports: ["UriHandler 0.1", "UriHandler 1.0"]
    Signal {
    name: "opened"
    Parameter { name: "uris"; type: "QStringList" }
    name: "UbuntuI18n"
    prototype: "QObject"
    exports: ["i18n 0.1", "i18n 1.0"]
    Property { name: "domain"; type: "string" }
    Property { name: "language"; type: "string" }
    Method {
    name: "bindtextdomain"
    Parameter { name: "domain_name"; type: "string" }
    Parameter { name: "dir_name"; type: "string" }
    Method {
    name: "tr"
    Parameter { name: "text"; type: "string" }
    Method {
    name: "tr"
    Parameter { name: "singular"; type: "string" }
    Parameter { name: "plural"; type: "string" }
    Parameter { name: "n"; type: "int" }
    Method {
    name: "dtr"
    Parameter { name: "domain"; type: "string" }
    Parameter { name: "text"; type: "string" }
    Method {
    name: "dtr"
    Parameter { name: "domain"; type: "string" }
    Parameter { name: "singular"; type: "string" }
    Parameter { name: "plural"; type: "string" }
    Parameter { name: "n"; type: "int" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components/AbstractButton"
    exports: ["AbstractButton 1.0"]
    Property { name: "pressed"; type: "bool" }
    Property { name: "hovered"; type: "bool" }
    Property { name: "__acceptEvents"; type: "bool" }
    Property { name: "__mouseArea"; type: "QQuickMouseArea"; isReadonly: true; isPointer: true }
    Signal { name: "clicked" }
    Signal { name: "pressAndHold" }
    Property { name: "action"; type: "UCAction"; isPointer: true }
    Property { name: "text"; type: "string" }
    Property { name: "iconSource"; type: "QUrl" }
    Property { name: "iconName"; type: "string" }
    Signal {
    name: "triggered"
    Parameter { name: "value"; type: "QJSValue" }
    Method {
    name: "trigger"
    Parameter { name: "value"; type: "QVariant" }
    Property { name: "style"; type: "QQmlComponent"; isPointer: true }
    Property { name: "__styleInstance"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Property { name: "activeFocusOnPress"; revision: 1; type: "bool" }
    Method {
    name: "requestFocus"
    Parameter { name: "reason"; type: "Qt::FocusReason" }
    Method { name: "requestFocus"; revision: 1; type: "bool" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components/ActionItem"
    exports: ["ActionItem 1.0"]
    Property { name: "action"; type: "UCAction"; isPointer: true }
    Property { name: "text"; type: "string" }
    Property { name: "iconSource"; type: "QUrl" }
    Property { name: "iconName"; type: "string" }
    Signal {
    name: "triggered"
    Parameter { name: "value"; type: "QJSValue" }
    Method {
    name: "trigger"
    Parameter { name: "value"; type: "QVariant" }
    Property { name: "style"; type: "QQmlComponent"; isPointer: true }
    Property { name: "__styleInstance"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Property { name: "activeFocusOnPress"; revision: 1; type: "bool" }
    Method {
    name: "requestFocus"
    Parameter { name: "reason"; type: "Qt::FocusReason" }
    Method { name: "requestFocus"; revision: 1; type: "bool" }
    prototype: "QObject"
    name: "Ubuntu.Components/ActionList"
    exports: ["ActionList 1.0"]
    Property { name: "actions"; type: "UCAction"; isList: true; isReadonly: true }
    Property { name: "children"; type: "UCAction"; isList: true; isReadonly: true }
    prototype: "QQuickItem"
    name: "Ubuntu.Components/ActivityIndicator"
    exports: ["ActivityIndicator 1.0"]
    Property { name: "running"; type: "bool" }
    Property { name: "onScreen"; type: "bool" }
    Property { name: "style"; type: "QQmlComponent"; isPointer: true }
    Property { name: "__styleInstance"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Property { name: "activeFocusOnPress"; revision: 1; type: "bool" }
    Method {
    name: "requestFocus"
    Parameter { name: "reason"; type: "Qt::FocusReason" }
    Method { name: "requestFocus"; revision: 1; type: "bool" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components.Internals/AnimatedItem"
    exports: ["Ubuntu.Components.Internals/AnimatedItem 0.1"]
    Property { name: "onScreen"; type: "bool" }
    Property { name: "style"; type: "QQmlComponent"; isPointer: true }
    Property { name: "__styleInstance"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Property { name: "activeFocusOnPress"; revision: 1; type: "bool" }
    Method {
    name: "requestFocus"
    Parameter { name: "reason"; type: "Qt::FocusReason" }
    Method { name: "requestFocus"; revision: 1; type: "bool" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components.Internals/AppHeader"
    exports: ["Ubuntu.Components.Internals/AppHeader 0.1"]
    Property { name: "animate"; type: "bool" }
    Property { name: "title"; type: "string" }
    Property { name: "contents"; type: "QQuickItem"; isPointer: true }
    Property { name: "flickable"; type: "QQuickFlickable"; isPointer: true }
    Property { name: "useDeprecatedToolbar"; type: "bool" }
    Property { name: "config"; type: "PageHeadConfiguration_QMLTYPE_10"; isPointer: true }
    Property { name: "tabsModel"; type: "QVariant" }
    Property { name: "pageStack"; type: "QVariant" }
    Property { name: "actions"; type: "QVariant" }
    Property { name: "__customBackAction"; type: "QVariant" }
    Method { name: "show"; type: "QVariant" }
    Method { name: "hide"; type: "QVariant" }
    Property { name: "style"; type: "QQmlComponent"; isPointer: true }
    Property { name: "__styleInstance"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Property { name: "activeFocusOnPress"; revision: 1; type: "bool" }
    Method {
    name: "requestFocus"
    Parameter { name: "reason"; type: "Qt::FocusReason" }
    Method { name: "requestFocus"; revision: 1; type: "bool" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components/Button"
    exports: ["Button 1.1"]
    Property { name: "strokeColor"; type: "QColor" }
    Property { name: "color"; type: "QColor" }
    Property { name: "gradient"; type: "QQuickGradient"; isPointer: true }
    Property { name: "font"; type: "QFont" }
    Property { name: "iconPosition"; type: "string" }
    Property { name: "pressed"; type: "bool" }
    Property { name: "hovered"; type: "bool" }
    Property { name: "__acceptEvents"; type: "bool" }
    Property { name: "__mouseArea"; type: "QQuickMouseArea"; isReadonly: true; isPointer: true }
    Signal { name: "clicked" }
    Signal { name: "pressAndHold" }
    Property { name: "action"; type: "UCAction"; isPointer: true }
    Property { name: "text"; type: "string" }
    Property { name: "iconSource"; type: "QUrl" }
    Property { name: "iconName"; type: "string" }
    Signal {
    name: "triggered"
    Parameter { name: "value"; type: "QJSValue" }
    Method {
    name: "trigger"
    Parameter { name: "value"; type: "QVariant" }
    Property { name: "style"; type: "QQmlComponent"; isPointer: true }
    Property { name: "__styleInstance"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Property { name: "activeFocusOnPress"; revision: 1; type: "bool" }
    Method {
    name: "requestFocus"
    Parameter { name: "reason"; type: "Qt::FocusReason" }
    Method { name: "requestFocus"; revision: 1; type: "bool" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components/CheckBox"
    exports: ["CheckBox 1.0"]
    Property { name: "checked"; type: "bool" }
    Property { name: "pressed"; type: "bool" }
    Property { name: "hovered"; type: "bool" }
    Property { name: "__acceptEvents"; type: "bool" }
    Property { name: "__mouseArea"; type: "QQuickMouseArea"; isReadonly: true; isPointer: true }
    Signal { name: "clicked" }
    Signal { name: "pressAndHold" }
    Property { name: "action"; type: "UCAction"; isPointer: true }
    Property { name: "text"; type: "string" }
    Property { name: "iconSource"; type: "QUrl" }
    Property { name: "iconName"; type: "string" }
    Signal {
    name: "triggered"
    Parameter { name: "value"; type: "QJSValue" }
    Method {
    name: "trigger"
    Parameter { name: "value"; type: "QVariant" }
    Property { name: "style"; type: "QQmlComponent"; isPointer: true }
    Property { name: "__styleInstance"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Property { name: "activeFocusOnPress"; revision: 1; type: "bool" }
    Method {
    name: "requestFocus"
    Parameter { name: "reason"; type: "Qt::FocusReason" }
    Method { name: "requestFocus"; revision: 1; type: "bool" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components/ComboButton"
    exports: ["ComboButton 1.1"]
    Property { name: "expanded"; type: "bool" }
    Property { name: "collapsedHeight"; type: "double" }
    Property { name: "expandedHeight"; type: "double" }
    Property { name: "comboListHeight"; type: "double"; isReadonly: true }
    Property { name: "dropdownColor"; type: "QColor" }
    Property { name: "comboList"; type: "QObject"; isList: true; isReadonly: true }
    Property { name: "strokeColor"; type: "QColor" }
    Property { name: "color"; type: "QColor" }
    Property { name: "gradient"; type: "QQuickGradient"; isPointer: true }
    Property { name: "font"; type: "QFont" }
    Property { name: "iconPosition"; type: "string" }
    Property { name: "pressed"; type: "bool" }
    Property { name: "hovered"; type: "bool" }
    Property { name: "__acceptEvents"; type: "bool" }
    Property { name: "__mouseArea"; type: "QQuickMouseArea"; isReadonly: true; isPointer: true }
    Signal { name: "clicked" }
    Signal { name: "pressAndHold" }
    Property { name: "action"; type: "UCAction"; isPointer: true }
    Property { name: "text"; type: "string" }
    Property { name: "iconSource"; type: "QUrl" }
    Property { name: "iconName"; type: "string" }
    Signal {
    name: "triggered"
    Parameter { name: "value"; type: "QJSValue" }
    Method {
    name: "trigger"
    Parameter { name: "value"; type: "QVariant" }
    Property { name: "style"; type: "QQmlComponent"; isPointer: true }
    Property { name: "__styleInstance"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Property { name: "activeFocusOnPress"; revision: 1; type: "bool" }
    Method {
    name: "requestFocus"
    Parameter { name: "reason"; type: "Qt::FocusReason" }
    Method { name: "requestFocus"; revision: 1; type: "bool" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components/CrossFadeImage"
    exports: ["CrossFadeImage 1.1"]
    Property { name: "source"; type: "QUrl" }
    Property { name: "fillMode"; type: "int" }
    Property { name: "fadeDuration"; type: "int" }
    Property { name: "sourceSize"; type: "QSizeF" }
    Property { name: "fadeStyle"; type: "string" }
    Property { name: "running"; type: "bool"; isReadonly: true }
    Property { name: "status"; type: "int"; isReadonly: true }
    prototype: "QQuickMouseArea"
    name: "Ubuntu.Components.Internals/DraggingArea"
    exports: ["Ubuntu.Components.Internals/DraggingArea 0.1"]
    Property { name: "orientation"; type: "int" }
    Property { name: "dragging"; type: "bool" }
    Property { name: "dragVelocity"; type: "double" }
    Property { name: "dragValue"; type: "double" }
    Property { name: "lateralPosition"; type: "double" }
    Property { name: "__pressedPosition"; type: "QPointF" }
    Property { name: "clickValidated"; type: "bool" }
    Property { name: "zeroVelocityCounts"; type: "bool" }
    Property { name: "__dragEvents"; type: "QVariant" }
    Signal { name: "dragStart" }
    Signal { name: "dragEnd" }
    Method { name: "updateSpeed"; type: "QVariant" }
    Method {
    name: "cullOldDragEvents"
    Parameter { name: "currentTime"; type: "QVariant" }
    Method {
    name: "getEventSpeed"
    Parameter { name: "currentTime"; type: "QVariant" }
    Parameter { name: "event"; type: "QVariant" }
    Method {
    name: "pushDragEvent"
    Parameter { name: "event"; type: "QVariant" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components/Header"
    exports: ["Header 1.0"]
    Property { name: "_for_autopilot"; type: "string" }
    Property { name: "animate"; type: "bool" }
    Property { name: "title"; type: "string" }
    Property { name: "contents"; type: "QQuickItem"; isPointer: true }
    Property { name: "flickable"; type: "QQuickFlickable"; isPointer: true }
    Property { name: "useDeprecatedToolbar"; type: "bool" }
    Property { name: "config"; type: "PageHeadConfiguration_QMLTYPE_10"; isPointer: true }
    Property { name: "tabsModel"; type: "QVariant" }
    Property { name: "pageStack"; type: "QVariant" }
    Property { name: "actions"; type: "QVariant" }
    Property { name: "__customBackAction"; type: "QVariant" }
    Method { name: "show"; type: "QVariant" }
    Method { name: "hide"; type: "QVariant" }
    Property { name: "style"; type: "QQmlComponent"; isPointer: true }
    Property { name: "__styleInstance"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Property { name: "activeFocusOnPress"; revision: 1; type: "bool" }
    Method {
    name: "requestFocus"
    Parameter { name: "reason"; type: "Qt::FocusReason" }
    Method { name: "requestFocus"; revision: 1; type: "bool" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components/Icon"
    exports: ["Icon 1.1"]
    Property { name: "source"; type: "QUrl" }
    Property { name: "name"; type: "string" }
    Property { name: "color"; type: "QColor" }
    Property { name: "keyColor"; type: "QColor" }
    prototype: "QQuickMultiPointTouchArea"
    name: "Ubuntu.Components.Internals/InputHandler"
    exports: ["Ubuntu.Components.Internals/InputHandler 0.1"]
    Property { name: "main"; type: "QQuickItem"; isPointer: true }
    Property { name: "input"; type: "QQuickItem"; isPointer: true }
    Property { name: "flickable"; type: "QQuickFlickable"; isPointer: true }
    Property { name: "selectionCursor"; type: "bool" }
    Property { name: "visibleArea"; type: "QQuickItem"; isPointer: true }
    Property { name: "lineSpacing"; type: "double" }
    Property { name: "lineSize"; type: "double" }
    Property { name: "frameDistance"; type: "QPointF" }
    Property { name: "oldText"; type: "string" }
    Property { name: "singleLine"; type: "bool"; isReadonly: true }
    Property { name: "textChanged"; type: "bool" }
    Property { name: "suppressReleaseEvent"; type: "bool" }
    Property { name: "pressedPosition"; type: "int" }
    Property { name: "moveStarts"; type: "int" }
    Property { name: "moveEnds"; type: "int" }
    Property { name: "scrollingDisabled"; type: "bool"; isReadonly: true }
    Property { name: "grandScroller"; type: "QQuickFlickable"; isReadonly: true; isPointer: true }
    Property { name: "scroller"; type: "QQuickFlickable"; isReadonly: true; isPointer: true }
    Property { name: "flickableList"; type: "QVariant" }
    Property { name: "popover"; type: "QVariant" }
    Signal {
    name: "pressAndHold"
    Parameter { name: "pos"; type: "int" }
    Signal {
    name: "tap"
    Parameter { name: "pos"; type: "int" }
    Signal { name: "textModified" }
    Method { name: "activateInput"; type: "QVariant" }
    Method { name: "showInputPanel"; type: "QVariant" }
    Method { name: "hideInputPanel"; type: "QVariant" }
    Method {
    name: "ensureVisible"
    Parameter { name: "rect"; type: "QVariant" }
    Method {
    name: "cursorPosition"
    Parameter { name: "x"; type: "QVariant" }
    Parameter { name: "y"; type: "QVariant" }
    Method {
    name: "mousePosition"
    Parameter { name: "mouse"; type: "QVariant" }
    Method {
    name: "positionInSelection"
    Parameter { name: "pos"; type: "QVariant" }
    Method {
    name: "mouseInSelection"
    Parameter { name: "mouse"; type: "QVariant" }
    Method {
    name: "selectText"
    Parameter { name: "mouse"; type: "QVariant" }
    Method {
    name: "firstFlickableParent"
    Parameter { name: "item"; type: "QVariant" }
    Method {
    name: "openContextMenu"
    Parameter { name: "mouse"; type: "QVariant" }
    Parameter { name: "noAutoselect"; type: "QVariant" }
    Method {
    name: "toggleFlickablesInteractive"
    Parameter { name: "turnOn"; type: "QVariant" }
    Method {
    name: "positionCaret"
    Parameter { name: "positioner"; type: "QVariant" }
    Parameter { name: "x"; type: "QVariant" }
    Parameter { name: "y"; type: "QVariant" }
    Method {
    name: "textCursorStyle"
    Parameter { name: "positionProperty"; type: "QVariant" }
    Method {
    name: "movePage"
    Parameter { name: "forward"; type: "QVariant" }
    Method {
    name: "handlePressed"
    Parameter { name: "event"; type: "QVariant" }
    Parameter { name: "touch"; type: "QVariant" }
    Method {
    name: "handleReleased"
    Parameter { name: "event"; type: "QVariant" }
    Parameter { name: "touch"; type: "QVariant" }
    Method {
    name: "handleMove"
    Parameter { name: "event"; type: "QVariant" }
    Parameter { name: "touch"; type: "QVariant" }
    Method {
    name: "handleDblClick"
    Parameter { name: "event"; type: "QVariant" }
    Parameter { name: "touch"; type: "QVariant" }
    prototype: "QQuickText"
    name: "Ubuntu.Components/Label"
    exports: ["Label 1.0"]
    Property { name: "fontSize"; type: "string" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components/MainView"
    exports: ["MainView 1.0"]
    Property { name: "applicationName"; type: "string" }
    Property { name: "anchorToKeyboard"; type: "bool" }
    Property { name: "useDeprecatedToolbar"; type: "bool" }
    Property { name: "headerColor"; type: "QColor" }
    Property { name: "backgroundColor"; type: "QColor" }
    Property { name: "footerColor"; type: "QColor" }
    Property { name: "automaticOrientation"; type: "bool" }
    Property { name: "contentsItem"; type: "QObject"; isList: true; isReadonly: true }
    Property { name: "actions"; type: "QObject"; isList: true; isReadonly: true }
    Property { name: "actionManager"; type: "UCActionManager"; isReadonly: true; isPointer: true }
    Property { name: "__isPageTreeNode"; type: "bool" }
    Property { name: "header"; type: "AppHeader_QMLTYPE_11"; isPointer: true }
    Property { name: "toolbar"; type: "Toolbar_QMLTYPE_64"; isPointer: true }
    Property { name: "__propagated"; type: "QObject"; isPointer: true }
    Property { name: "active"; type: "bool" }
    Property { name: "pageStack"; type: "QQuickItem"; isPointer: true }
    Property { name: "parentNode"; type: "QQuickItem"; isPointer: true }
    Property { name: "activeLeafNode"; type: "QQuickItem"; isPointer: true }
    Property { name: "isLeaf"; type: "bool" }
    Property { name: "style"; type: "QQmlComponent"; isPointer: true }
    Property { name: "__styleInstance"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Property { name: "activeFocusOnPress"; revision: 1; type: "bool" }
    Method {
    name: "requestFocus"
    Parameter { name: "reason"; type: "Qt::FocusReason" }
    Method { name: "requestFocus"; revision: 1; type: "bool" }
    prototype: "QObject"
    name: "Ubuntu.Components/Object"
    exports: ["Object 1.0"]
    Property { name: "__defaultPropertyFix"; type: "QObject"; isList: true; isReadonly: true }
    Property { name: "children"; type: "QObject"; isList: true; isReadonly: true }
    prototype: "QQuickItem"
    name: "Ubuntu.Components/OptionSelector"
    exports: ["OptionSelector 1.0"]
    Property { name: "expanded"; type: "bool" }
    Property { name: "multiSelection"; type: "bool" }
    Property { name: "colourImage"; type: "bool" }
    Property { name: "delegate"; type: "QQmlComponent"; isPointer: true }
    Property { name: "containerHeight"; type: "double" }
    Property { name: "model"; type: "QVariant" }
    Property { name: "selectedIndex"; type: "int" }
    Property { name: "currentlyExpanded"; type: "bool" }
    Property { name: "itemHeight"; type: "double"; isReadonly: true }
    Signal {
    name: "delegateClicked"
    Parameter { name: "index"; type: "int" }
    Signal { name: "expansionCompleted" }
    Property { name: "selected"; type: "bool" }
    Property { name: "highlightWhenPressed"; type: "bool" }
    Property { name: "removable"; type: "bool" }
    Property { name: "__height"; type: "int" }
    Property { name: "showDivider"; type: "bool" }
    Property { name: "__contentsMargins"; type: "double" }
    Property { name: "confirmRemoval"; type: "bool" }
    Property { name: "swipingState"; type: "string"; isReadonly: true }
    Property { name: "waitingConfirmationForRemoval"; type: "bool"; isReadonly: true }
    Property { name: "children"; type: "QObject"; isList: true; isReadonly: true }
    Property { name: "__contents"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Property { name: "backgroundIndicator"; type: "QQuickItem"; isList: true; isReadonly: true }
    Property { name: "divider"; type: "ThinDivider_QMLTYPE_89"; isReadonly: true; isPointer: true }
    Signal { name: "itemRemoved" }
    Method { name: "cancelItemRemoval"; type: "QVariant" }
    Property { name: "pressed"; type: "bool" }
    Property { name: "hovered"; type: "bool" }
    Property { name: "__acceptEvents"; type: "bool" }
    Property { name: "__mouseArea"; type: "QQuickMouseArea"; isReadonly: true; isPointer: true }
    Signal { name: "clicked" }
    Signal { name: "pressAndHold" }
    Property { name: "action"; type: "UCAction"; isPointer: true }
    Property { name: "text"; type: "string" }
    Property { name: "iconSource"; type: "QUrl" }
    Property { name: "iconName"; type: "string" }
    Signal {
    name: "triggered"
    Parameter { name: "value"; type: "QJSValue" }
    Method {
    name: "trigger"
    Parameter { name: "value"; type: "QVariant" }
    Property { name: "style"; type: "QQmlComponent"; isPointer: true }
    Property { name: "__styleInstance"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Property { name: "activeFocusOnPress"; revision: 1; type: "bool" }
    Method {
    name: "requestFocus"
    Parameter { name: "reason"; type: "Qt::FocusReason" }
    Method { name: "requestFocus"; revision: 1; type: "bool" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components/OptionSelectorDelegate"
    exports: ["OptionSelectorDelegate 1.0"]
    Property { name: "subText"; type: "string" }
    Property { name: "icon"; type: "QUrl" }
    Property { name: "constrainImage"; type: "bool" }
    Property { name: "colourImage"; type: "bool" }
    Property { name: "assetColour"; type: "QColor" }
    Property { name: "listView"; type: "QQuickListView"; isReadonly: true; isPointer: true }
    Property { name: "fragColourShader"; type: "string"; isReadonly: true }
    Property { name: "selected"; type: "bool" }
    Property { name: "highlightWhenPressed"; type: "bool" }
    Property { name: "removable"; type: "bool" }
    Property { name: "__height"; type: "int" }
    Property { name: "showDivider"; type: "bool" }
    Property { name: "__contentsMargins"; type: "double" }
    Property { name: "confirmRemoval"; type: "bool" }
    Property { name: "swipingState"; type: "string"; isReadonly: true }
    Property { name: "waitingConfirmationForRemoval"; type: "bool"; isReadonly: true }
    Property { name: "children"; type: "QObject"; isList: true; isReadonly: true }
    Property { name: "__contents"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Property { name: "backgroundIndicator"; type: "QQuickItem"; isList: true; isReadonly: true }
    Property { name: "divider"; type: "ThinDivider_QMLTYPE_89"; isReadonly: true; isPointer: true }
    Signal { name: "itemRemoved" }
    Method { name: "cancelItemRemoval"; type: "QVariant" }
    Property { name: "pressed"; type: "bool" }
    Property { name: "hovered"; type: "bool" }
    Property { name: "__acceptEvents"; type: "bool" }
    Property { name: "__mouseArea"; type: "QQuickMouseArea"; isReadonly: true; isPointer: true }
    Signal { name: "clicked" }
    Signal { name: "pressAndHold" }
    Property { name: "action"; type: "UCAction"; isPointer: true }
    Property { name: "text"; type: "string" }
    Property { name: "iconSource"; type: "QUrl" }
    Property { name: "iconName"; type: "string" }
    Signal {
    name: "triggered"
    Parameter { name: "value"; type: "QJSValue" }
    Method {
    name: "trigger"
    Parameter { name: "value"; type: "QVariant" }
    Property { name: "style"; type: "QQmlComponent"; isPointer: true }
    Property { name: "__styleInstance"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Property { name: "activeFocusOnPress"; revision: 1; type: "bool" }
    Method {
    name: "requestFocus"
    Parameter { name: "reason"; type: "Qt::FocusReason" }
    Method { name: "requestFocus"; revision: 1; type: "bool" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components/OrientationHelper"
    exports: ["OrientationHelper 1.0"]
    Property { name: "automaticOrientation"; type: "bool" }
    Property { name: "transitionEnabled"; type: "bool" }
    Property { name: "orientationAngle"; type: "int" }
    Property { name: "anchorToKeyboard"; type: "bool" }
    Property { name: "rotating"; type: "bool"; isReadonly: true }
    Property { name: "__orientationAngle"; type: "int" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components/Page"
    exports: ["Page 1.1"]
    Property {
    name: "head"
    Property { name: "title"; type: "string" }
    Property { name: "tools"; type: "QQuickItem"; isPointer: true }
    Property { name: "__customHeaderContents"; type: "QQuickItem"; isPointer: true }
    Property { name: "flickable"; type: "QQuickFlickable"; isPointer: true }
    Property { name: "actions"; type: "QObject"; isList: true; isReadonly: true }
    Property { name: "__isPageTreeNode"; type: "bool" }
    Property { name: "header"; type: "AppHeader_QMLTYPE_11"; isPointer: true }
    Property { name: "toolbar"; type: "Toolbar_QMLTYPE_64"; isPointer: true }
    Property { name: "__propagated"; type: "QObject"; isPointer: true }
    Property { name: "active"; type: "bool" }
    Property { name: "pageStack"; type: "QQuickItem"; isPointer: true }
    Property { name: "parentNode"; type: "QQuickItem"; isPointer: true }
    Property { name: "activeLeafNode"; type: "QQuickItem"; isPointer: true }
    Property { name: "isLeaf"; type: "bool" }
    Property { name: "style"; type: "QQmlComponent"; isPointer: true }
    Property { name: "__styleInstance"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Property { name: "activeFocusOnPress"; revision: 1; type: "bool" }
    Method {
    name: "requestFocus"
    Parameter { name: "reason"; type: "Qt::FocusReason" }
    Method { name: "requestFocus"; revision: 1; type: "bool" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components.Internals/PageBase"
    exports: ["Ubuntu.Components.Internals/PageBase 0.1"]
    Property { name: "title"; type: "string" }
    Property { name: "tools"; type: "QQuickItem"; isPointer: true }
    Property { name: "__customHeaderContents"; type: "QQuickItem"; isPointer: true }
    Property { name: "flickable"; type: "QQuickFlickable"; isPointer: true }
    Property { name: "actions"; type: "QObject"; isList: true; isReadonly: true }
    Property { name: "__isPageTreeNode"; type: "bool" }
    Property { name: "header"; type: "AppHeader_QMLTYPE_11"; isPointer: true }
    Property { name: "toolbar"; type: "Toolbar_QMLTYPE_64"; isPointer: true }
    Property { name: "__propagated"; type: "QObject"; isPointer: true }
    Property { name: "active"; type: "bool" }
    Property { name: "pageStack"; type: "QQuickItem"; isPointer: true }
    Property { name: "parentNode"; type: "QQuickItem"; isPointer: true }
    Property { name: "activeLeafNode"; type: "QQuickItem"; isPointer: true }
    Property { name: "isLeaf"; type: "bool" }
    Property { name: "style"; type: "QQmlComponent"; isPointer: true }
    Property { name: "__styleInstance"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Property { name: "activeFocusOnPress"; revision: 1; type: "bool" }
    Method {
    name: "requestFocus"
    Parameter { name: "reason"; type: "Qt::FocusReason" }
    Method { name: "requestFocus"; revision: 1; type: "bool" }
    prototype: "QObject"
    name: "Ubuntu.Components/PageHeadConfiguration"
    exports: ["PageHeadConfiguration 1.1"]
    Property { name: "actions"; type: "UCAction"; isList: true; isReadonly: true }
    Property { name: "backAction"; type: "UCAction"; isPointer: true }
    Property { name: "contents"; type: "QQuickItem"; isPointer: true }
    Property { name: "foregroundColor"; type: "QColor" }
    Property {
    name: "sections"
    Property { name: "__defaultPropertyFix"; type: "QObject"; isList: true; isReadonly: true }
    Property { name: "children"; type: "QObject"; isList: true; isReadonly: true }
    prototype: "QObject"
    name: "Ubuntu.Components/PageHeadSections"
    exports: ["PageHeadSections 1.1"]
    Property { name: "enabled"; type: "bool" }
    Property { name: "selectedIndex"; type: "int" }
    Property { name: "model"; type: "QVariant" }
    prototype: "QQuickState"
    name: "Ubuntu.Components/PageHeadState"
    exports: ["PageHeadState 1.1"]
    Property { name: "head"; type: "PageHeadConfiguration_QMLTYPE_10"; isPointer: true }
    Property { name: "actions"; type: "UCAction"; isList: true; isReadonly: true }
    Property { name: "backAction"; type: "UCAction"; isPointer: true }
    Property { name: "contents"; type: "QQuickItem"; isPointer: true }
    prototype: "QQuickItem"
    name: "Ubuntu.Components/PageStack"
    exports: ["PageStack 1.0"]
    Property { name: "__showHeader"; type: "bool" }
    Property { name: "depth"; type: "int" }
    Property { name: "currentPage"; type: "QQuickItem"; isPointer: true }
    Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    Method {
    name: "push"
    Parameter { name: "page"; type: "QVariant" }
    Parameter { name: "properties"; type: "QVariant" }
    Method { name: "pop"; type: "QVariant" }
    Method { name: "clear"; type: "QVariant" }
    Property { name: "__isPageTreeNode"; type: "bool" }
    Property { name: "header"; type: "AppHeader_QMLTYPE_11"; isPointer: true }
    Property { name: "toolbar"; type: "Toolbar_QMLTYPE_64"; isPointer: true }
    Property { name: "__propagated"; type: "QObject"; isPointer: true }
    Property { name: "active"; type: "bool" }
    Property { name: "pageStack"; type: "QQuickItem"; isPointer: true }
    Property { name: "parentNode"; type: "QQuickItem"; isPointer: true }
    Property { name: "activeLeafNode"; type: "QQuickItem"; isPointer: true }
    Property { name: "isLeaf"; type: "bool" }
    Property { name: "style"; type: "QQmlComponent"; isPointer: true }
    Property { name: "__styleInstance"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Property { name: "activeFocusOnPress"; revision: 1; type: "bool" }
    Method {
    name: "requestFocus"
    Parameter { name: "reason"; type: "Qt::FocusReason" }
    Method { name: "requestFocus"; revision: 1; type: "bool" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components.Internals/PageTreeNode"
    exports: ["Ubuntu.Components.Internals/PageTreeNode 0.1"]
    Property { name: "__isPageTreeNode"; type: "bool" }
    Property { name: "header"; type: "AppHeader_QMLTYPE_11"; isPointer: true }
    Property { name: "toolbar"; type: "Toolbar_QMLTYPE_64"; isPointer: true }
    Property { name: "__propagated"; type: "QObject"; isPointer: true }
    Property { name: "active"; type: "bool" }
    Property { name: "pageStack"; type: "QQuickItem"; isPointer: true }
    Property { name: "parentNode"; type: "QQuickItem"; isPointer: true }
    Property { name: "activeLeafNode"; type: "QQuickItem"; isPointer: true }
    Property { name: "isLeaf"; type: "bool" }
    Property { name: "style"; type: "QQmlComponent"; isPointer: true }
    Property { name: "__styleInstance"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Property { name: "activeFocusOnPress"; revision: 1; type: "bool" }
    Method {
    name: "requestFocus"
    Parameter { name: "reason"; type: "Qt::FocusReason" }
    Method { name: "requestFocus"; revision: 1; type: "bool" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components.Internals/PageWrapper"
    exports: ["Ubuntu.Components.Internals/PageWrapper 0.1"]
    Property { name: "object"; type: "QQuickItem"; isPointer: true }
    Property { name: "canDestroy"; type: "bool" }
    Property { name: "reference"; type: "QVariant" }
    Property { name: "properties"; type: "QVariant" }
    Method { name: "destroyObject"; type: "QVariant" }
    Property { name: "__isPageTreeNode"; type: "bool" }
    Property { name: "header"; type: "AppHeader_QMLTYPE_11"; isPointer: true }
    Property { name: "toolbar"; type: "Toolbar_QMLTYPE_64"; isPointer: true }
    Property { name: "__propagated"; type: "QObject"; isPointer: true }
    Property { name: "active"; type: "bool" }
    Property { name: "pageStack"; type: "QQuickItem"; isPointer: true }
    Property { name: "parentNode"; type: "QQuickItem"; isPointer: true }
    Property { name: "activeLeafNode"; type: "QQuickItem"; isPointer: true }
    Property { name: "isLeaf"; type: "bool" }
    Property { name: "style"; type: "QQmlComponent"; isPointer: true }
    Property { name: "__styleInstance"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Property { name: "activeFocusOnPress"; revision: 1; type: "bool" }
    Method {
    name: "requestFocus"
    Parameter { name: "reason"; type: "Qt::FocusReason" }
    Method { name: "requestFocus"; revision: 1; type: "bool" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components/Panel"
    exports: ["Panel 1.0"]
    Property { name: "align"; type: "int" }
    Property { name: "opened"; type: "bool" }
    Property { name: "locked"; type: "bool" }
    Property { name: "hintSize"; type: "double" }
    Property { name: "triggerSize"; type: "double" }
    Property { name: "animate"; type: "bool" }
    Property { name: "animating"; type: "bool"; isReadonly: true }
    Property { name: "__closeOnContentsClicks"; type: "bool" }
    Property { name: "__openOnHover"; type: "bool" }
    Property { name: "contents"; type: "QObject"; isList: true; isReadonly: true }
    Property { name: "hideTimeout"; type: "int" }
    Property { name: "position"; type: "double"; isReadonly: true }
    Property { name: "pressed"; type: "bool"; isReadonly: true }
    Method { name: "open"; type: "QVariant" }
    Method { name: "close"; type: "QVariant" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components/ProgressBar"
    exports: ["ProgressBar 1.1"]
    Property { name: "showProgressPercentage"; type: "bool" }
    Property { name: "indeterminate"; type: "bool" }
    Property { name: "minimumValue"; type: "double" }
    Property { name: "maximumValue"; type: "double" }
    Property { name: "value"; type: "double" }
    Property { name: "onScreen"; type: "bool" }
    Property { name: "style"; type: "QQmlComponent"; isPointer: true }
    Property { name: "__styleInstance"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Property { name: "activeFocusOnPress"; revision: 1; type: "bool" }
    Method {
    name: "requestFocus"
    Parameter { name: "reason"; type: "Qt::FocusReason" }
    Method { name: "requestFocus"; revision: 1; type: "bool" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components/PullToRefresh"
    exports: ["PullToRefresh 1.1"]
    Property { name: "releaseToRefresh"; type: "bool"; isReadonly: true }
    Property { name: "offset"; type: "double"; isReadonly: true }
    Property { name: "content"; type: "QQmlComponent"; isPointer: true }
    Property { name: "target"; type: "QQuickFlickable"; isPointer: true }
    Property { name: "refreshing"; type: "bool" }
    Signal { name: "refresh" }
    Property { name: "style"; type: "QQmlComponent"; isPointer: true }
    Property { name: "__styleInstance"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Property { name: "activeFocusOnPress"; revision: 1; type: "bool" }
    Method {
    name: "requestFocus"
    Parameter { name: "reason"; type: "Qt::FocusReason" }
    Method { name: "requestFocus"; revision: 1; type: "bool" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components/Scrollbar"
    exports: ["Scrollbar 1.0"]
    Property { name: "flickableItem"; type: "QQuickFlickable"; isPointer: true }
    Property { name: "align"; type: "int" }
    Property { name: "__interactive"; type: "bool" }
    Property { name: "__private"; type: "QObject"; isReadonly: true; isPointer: true }
    Property { name: "style"; type: "QQmlComponent"; isPointer: true }
    Property { name: "__styleInstance"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Property { name: "activeFocusOnPress"; revision: 1; type: "bool" }
    Method {
    name: "requestFocus"
    Parameter { name: "reason"; type: "Qt::FocusReason" }
    Method { name: "requestFocus"; revision: 1; type: "bool" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components/Slider"
    exports: ["Slider 1.0"]
    Property { name: "minimumValue"; type: "double" }
    Property { name: "maximumValue"; type: "double" }
    Property { name: "value"; type: "double" }
    Property { name: "live"; type: "bool" }
    Property { name: "pressed"; type: "bool"; isReadonly: true }
    Property { name: "__internals"; type: "QQuickMouseArea"; isReadonly: true; isPointer: true }
    Signal {
    name: "touched"
    Parameter { name: "onThumb"; type: "bool" }
    Method {
    name: "formatValue"
    Parameter { name: "v"; type: "QVariant" }
    Property { name: "style"; type: "QQmlComponent"; isPointer: true }
    Property { name: "__styleInstance"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Property { name: "activeFocusOnPress"; revision: 1; type: "bool" }
    Method {
    name: "requestFocus"
    Parameter { name: "reason"; type: "Qt::FocusReason" }
    Method { name: "requestFocus"; revision: 1; type: "bool" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components/StyledItem"
    exports: ["StyledItem 1.1"]
    Property { name: "style"; type: "QQmlComponent"; isPointer: true }
    Property { name: "__styleInstance"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Property { name: "activeFocusOnPress"; revision: 1; type: "bool" }
    Method {
    name: "requestFocus"
    Parameter { name: "reason"; type: "Qt::FocusReason" }
    Method { name: "requestFocus"; revision: 1; type: "bool" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components/Switch"
    exports: ["Switch 1.0"]
    Property { name: "checked"; type: "bool" }
    Property { name: "pressed"; type: "bool" }
    Property { name: "hovered"; type: "bool" }
    Property { name: "__acceptEvents"; type: "bool" }
    Property { name: "__mouseArea"; type: "QQuickMouseArea"; isReadonly: true; isPointer: true }
    Signal { name: "clicked" }
    Signal { name: "pressAndHold" }
    Property { name: "action"; type: "UCAction"; isPointer: true }
    Property { name: "text"; type: "string" }
    Property { name: "iconSource"; type: "QUrl" }
    Property { name: "iconName"; type: "string" }
    Signal {
    name: "triggered"
    Parameter { name: "value"; type: "QJSValue" }
    Method {
    name: "trigger"
    Parameter { name: "value"; type: "QVariant" }
    Property { name: "style"; type: "QQmlComponent"; isPointer: true }
    Property { name: "__styleInstance"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Property { name: "activeFocusOnPress"; revision: 1; type: "bool" }
    Method {
    name: "requestFocus"
    Parameter { name: "reason"; type: "Qt::FocusReason" }
    Method { name: "requestFocus"; revision: 1; type: "bool" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components/Tab"
    exports: ["Tab 1.0"]
    Property { name: "title"; type: "string" }
    Property { name: "iconSource"; type: "QUrl" }
    Property { name: "page"; type: "QQuickItem"; isPointer: true }
    Property { name: "index"; type: "int"; isReadonly: true }
    Property { name: "__protected"; type: "QObject"; isReadonly: true; isPointer: true }
    Property { name: "__isPageTreeNode"; type: "bool" }
    Property { name: "header"; type: "AppHeader_QMLTYPE_11"; isPointer: true }
    Property { name: "toolbar"; type: "Toolbar_QMLTYPE_64"; isPointer: true }
    Property { name: "__propagated"; type: "QObject"; isPointer: true }
    Property { name: "active"; type: "bool" }
    Property { name: "pageStack"; type: "QQuickItem"; isPointer: true }
    Property { name: "parentNode"; type: "QQuickItem"; isPointer: true }
    Property { name: "activeLeafNode"; type: "QQuickItem"; isPointer: true }
    Property { name: "isLeaf"; type: "bool" }
    Property { name: "style"; type: "QQmlComponent"; isPointer: true }
    Property { name: "__styleInstance"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Property { name: "activeFocusOnPress"; revision: 1; type: "bool" }
    Method {
    name: "requestFocus"
    Parameter { name: "reason"; type: "Qt::FocusReason" }
    Method { name: "requestFocus"; revision: 1; type: "bool" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components/TabBar"
    exports: ["TabBar 1.0"]
    Property { name: "tabsItem"; type: "QQuickItem"; isPointer: true }
    Property { name: "pressed"; type: "bool"; isReadonly: true }
    Property { name: "selectionMode"; type: "bool" }
    Property { name: "selectedIndex"; type: "int" }
    Property { name: "alwaysSelectionMode"; type: "bool" }
    Property { name: "animate"; type: "bool" }
    Property { name: "model"; type: "QVariant" }
    Property { name: "style"; type: "QQmlComponent"; isPointer: true }
    Property { name: "__styleInstance"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Property { name: "activeFocusOnPress"; revision: 1; type: "bool" }
    Method {
    name: "requestFocus"
    Parameter { name: "reason"; type: "Qt::FocusReason" }
    Method { name: "requestFocus"; revision: 1; type: "bool" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components/Tabs"
    exports: ["Tabs 1.0"]
    Property { name: "selectedTab"; type: "Tab_QMLTYPE_128"; isReadonly: true; isPointer: true }
    Property { name: "currentPage"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Property { name: "tabBar"; type: "TabBar_QMLTYPE_16"; isPointer: true }
    Property { name: "__model"; type: "QVariant" }
    Property { name: "selectedTabIndex"; type: "int" }
    Property { name: "tabChildren"; type: "QObject"; isList: true; isReadonly: true }
    Property { name: "count"; type: "int"; isReadonly: true }
    Signal { name: "modelChanged" }
    Property { name: "__isPageTreeNode"; type: "bool" }
    Property { name: "header"; type: "AppHeader_QMLTYPE_11"; isPointer: true }
    Property { name: "toolbar"; type: "Toolbar_QMLTYPE_64"; isPointer: true }
    Property { name: "__propagated"; type: "QObject"; isPointer: true }
    Property { name: "active"; type: "bool" }
    Property { name: "pageStack"; type: "QQuickItem"; isPointer: true }
    Property { name: "parentNode"; type: "QQuickItem"; isPointer: true }
    Property { name: "activeLeafNode"; type: "QQuickItem"; isPointer: true }
    Property { name: "isLeaf"; type: "bool" }
    Property { name: "style"; type: "QQmlComponent"; isPointer: true }
    Property { name: "__styleInstance"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Property { name: "activeFocusOnPress"; revision: 1; type: "bool" }
    Method {
    name: "requestFocus"
    Parameter { name: "reason"; type: "Qt::FocusReason" }
    Method { name: "requestFocus"; revision: 1; type: "bool" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components/TextArea"
    exports: ["TextArea 1.0"]
    Property { name: "highlighted"; type: "bool" }
    Property { name: "autoExpand"; type: "bool" }
    Property { name: "autoSize"; type: "bool" }
    Property { name: "maximumLineCount"; type: "int" }
    Property { name: "contentWidth"; type: "double" }
    Property { name: "contentHeight"; type: "double" }
    Property { name: "cursorDelegate"; type: "QQmlComponent"; isPointer: true }
    Property { name: "popover"; type: "QVariant" }
    Property { name: "placeholderText"; type: "string" }
    Property { name: "displayText"; type: "string"; isReadonly: true }
    Property { name: "selectByMouse"; type: "bool" }
    Property { name: "activeFocusOnPress"; type: "bool" }
    Property { name: "baseUrl"; type: "QUrl" }
    Property { name: "canPaste"; type: "bool"; isReadonly: true }
    Property { name: "canRedo"; type: "bool"; isReadonly: true }
    Property { name: "canUndo"; type: "bool"; isReadonly: true }
    Property { name: "color"; type: "QColor" }
    Property { name: "cursorPosition"; type: "int" }
    Property { name: "cursorRectangle"; type: "QRectF"; isReadonly: true }
    Property { name: "cursorVisible"; type: "bool" }
    Property { name: "effectiveHorizontalAlignment"; type: "int"; isReadonly: true }
    Property { name: "font"; type: "QFont" }
    Property { name: "horizontalAlignment"; type: "int" }
    Property { name: "inputMethodComposing"; type: "bool"; isReadonly: true }
    Property { name: "inputMethodHints"; type: "int" }
    Property { name: "length"; type: "int"; isReadonly: true }
    Property { name: "lineCount"; type: "int"; isReadonly: true }
    Property { name: "mouseSelectionMode"; type: "int" }
    Property { name: "persistentSelection"; type: "bool" }
    Property { name: "readOnly"; type: "bool" }
    Property { name: "renderType"; type: "int" }
    Property { name: "selectedText"; type: "string"; isReadonly: true }
    Property { name: "selectedTextColor"; type: "QColor" }
    Property { name: "selectionColor"; type: "QColor" }
    Property { name: "selectionEnd"; type: "int"; isReadonly: true }
    Property { name: "selectionStart"; type: "int"; isReadonly: true }
    Property { name: "text"; type: "string" }
    Property { name: "textFormat"; type: "int" }
    Property { name: "verticalAlignment"; type: "int" }
    Property { name: "wrapMode"; type: "int" }
    Signal {
    name: "linkActivated"
    Parameter { name: "link"; type: "string" }
    Method { name: "copy"; type: "QVariant" }
    Method { name: "cut"; type: "QVariant" }
    Method { name: "deselect"; type: "QVariant" }
    Method {
    name: "insert"
    Parameter { name: "position"; type: "QVariant" }
    Parameter { name: "text"; type: "QVariant" }
    Method {
    name: "positionAt"
    Parameter { name: "x"; type: "QVariant" }
    Parameter { name: "y"; type: "QVariant" }
    Method {
    name: "isRightToLeft"
    Parameter { name: "start"; type: "QVariant" }
    Parameter { name: "end"; type: "QVariant" }
    Method {
    name: "moveCursorSelection"
    Parameter { name: "position"; type: "QVariant" }
    Parameter { name: "mode"; type: "QVariant" }
    Method {
    name: "paste"
    Parameter { name: "data"; type: "QVariant" }
    Method {
    name: "positionToRectangle"
    Parameter { name: "position"; type: "QVariant" }
    Method { name: "redo"; type: "QVariant" }
    Method {
    name: "select"
    Parameter { name: "start"; type: "QVariant" }
    Parameter { name: "end"; type: "QVariant" }
    Method { name: "selectAll"; type: "QVariant" }
    Method { name: "selectWord"; type: "QVariant" }
    Method {
    name: "getFormattedText"
    Parameter { name: "start"; type: "QVariant" }
    Parameter { name: "end"; type: "QVariant" }
    Method {
    name: "getText"
    Parameter { name: "start"; type: "QVariant" }
    Parameter { name: "end"; type: "QVariant" }
    Method {
    name: "remove"
    Parameter { name: "start"; type: "QVariant" }
    Parameter { name: "end"; type: "QVariant" }
    Method { name: "undo"; type: "QVariant" }
    Property { name: "style"; type: "QQmlComponent"; isPointer: true }
    Property { name: "__styleInstance"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Method {
    name: "requestFocus"
    Parameter { name: "reason"; type: "Qt::FocusReason" }
    Method { name: "requestFocus"; revision: 1; type: "bool" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components.Internals/TextCursor"
    exports: ["Ubuntu.Components.Internals/TextCursor 0.1"]
    Property { name: "positionProperty"; type: "string" }
    Property { name: "handler"; type: "InputHandler_QMLTYPE_54"; isPointer: true }
    Property { name: "cursorDelegate"; type: "QQmlComponent"; isReadonly: true; isPointer: true }
    Property { name: "caret"; type: "QQuickItem"; isPointer: true }
    Property { name: "caretX"; type: "double" }
    Property { name: "caretY"; type: "double" }
    Property { name: "typing"; type: "bool" }
    Property { name: "contextMenuVisible"; type: "bool" }
    Method {
    name: "mappedCursorPosition"
    Parameter { name: "pos"; type: "QVariant" }
    Method { name: "openPopover"; type: "QVariant" }
    Method {
    name: "contextMenuHidden"
    Parameter { name: "p"; type: "QVariant" }
    Property { name: "style"; type: "QQmlComponent"; isPointer: true }
    Property { name: "__styleInstance"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Property { name: "activeFocusOnPress"; revision: 1; type: "bool" }
    Method {
    name: "requestFocus"
    Parameter { name: "reason"; type: "Qt::FocusReason" }
    Method { name: "requestFocus"; revision: 1; type: "bool" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components/TextField"
    exports: ["TextField 1.0"]
    Property { name: "highlighted"; type: "bool" }
    Property { name: "hasClearButton"; type: "bool" }
    Property { name: "customSoftwareInputPanel"; type: "QQmlComponent"; isPointer: true }
    Property { name: "errorHighlight"; type: "bool" }
    Property { name: "cursorDelegate"; type: "QQmlComponent"; isPointer: true }
    Property { name: "popover"; type: "QVariant" }
    Property { name: "placeholderText"; type: "string" }
    Property { name: "primaryItem"; type: "QObject"; isList: true; isReadonly: true }
    Property { name: "secondaryItem"; type: "QObject"; isList: true; isReadonly: true }
    Property { name: "acceptableInput"; type: "bool"; isReadonly: true }
    Property { name: "activeFocusOnPress"; type: "bool" }
    Property { name: "autoScroll"; type: "bool" }
    Property { name: "canPaste"; type: "bool"; isReadonly: true }
    Property { name: "canRedo"; type: "bool"; isReadonly: true }
    Property { name: "canUndo"; type: "bool"; isReadonly: true }
    Property { name: "color"; type: "QColor" }
    Property { name: "contentHeight"; type: "double"; isReadonly: true }
    Property { name: "contentWidth"; type: "double"; isReadonly: true }
    Property { name: "cursorPosition"; type: "int" }
    Property { name: "cursorRectangle"; type: "QRectF"; isReadonly: true }
    Property { name: "cursorVisible"; type: "bool" }
    Property { name: "displayText"; type: "string"; isReadonly: true }
    Property { name: "echoMode"; type: "int" }
    Property { name: "font"; type: "QFont" }
    Property { name: "inputMask"; type: "string" }
    Property { name: "inputMethodComposing"; type: "bool"; isReadonly: true }
    Property { name: "inputMethodHints"; type: "int" }
    Property { name: "length"; type: "int"; isReadonly: true }
    Property { name: "maximumLength"; type: "int" }
    Property { name: "mouseSelectionMode"; type: "int" }
    Property { name: "persistentSelection"; type: "bool" }
    Property { name: "readOnly"; type: "bool" }
    Property { name: "renderType"; type: "int" }
    Property { name: "selectByMouse"; type: "bool" }
    Property { name: "selectedText"; type: "string"; isReadonly: true }
    Property { name: "selectionStart"; type: "int"; isReadonly: true }
    Property { name: "selectionEnd"; type: "int"; isReadonly: true }
    Property { name: "text"; type: "string" }
    Property { name: "validator"; type: "QValidator"; isPointer: true }
    Property { name: "horizontalAlignment"; type: "int" }
    Property { name: "effectiveHorizontalAlignment"; type: "int"; isReadonly: true }
    Property { name: "verticalAlignment"; type: "int" }
    Property { name: "passwordCharacter"; type: "string" }
    Property { name: "selectionColor"; type: "QColor" }
    Property { name: "selectedTextColor"; type: "QColor" }
    Signal { name: "accepted" }
    Method { name: "copy"; type: "QVariant" }
    Method { name: "cut"; type: "QVariant" }
    Method {
    name: "paste"
    Parameter { name: "data"; type: "QVariant" }
    Method { name: "deselect"; type: "QVariant" }
    Method {
    name: "insert"
    Parameter { name: "position"; type: "QVariant" }
    Parameter { name: "text"; type: "QVariant" }
    Method {
    name: "positionAt"
    Parameter { name: "x"; type: "QVariant" }
    Parameter { name: "position"; type: "QVariant" }
    Method {
    name: "positionToRectangle"
    Parameter { name: "pos"; type: "QVariant" }
    Method {
    name: "select"
    Parameter { name: "start"; type: "QVariant" }
    Parameter { name: "end"; type: "QVariant" }
    Method { name: "selectAll"; type: "QVariant" }
    Method { name: "selectWord"; type: "QVariant" }
    Method {
    name: "isRightToLeft"
    Parameter { name: "start"; type: "QVariant" }
    Parameter { name: "end"; type: "QVariant" }
    Method {
    name: "moveCursorSelection"
    Parameter { name: "position"; type: "QVariant" }
    Parameter { name: "mode"; type: "QVariant" }
    Method { name: "redo"; type: "QVariant" }
    Method { name: "undo"; type: "QVariant" }
    Method {
    name: "remove"
    Parameter { name: "start"; type: "QVariant" }
    Parameter { name: "end"; type: "QVariant" }
    Method {
    name: "getText"
    Parameter { name: "start"; type: "QVariant" }
    Parameter { name: "end"; type: "QVariant" }
    Property { name: "action"; type: "UCAction"; isPointer: true }
    Property { name: "iconSource"; type: "QUrl" }
    Property { name: "iconName"; type: "string" }
    Signal {
    name: "triggered"
    Parameter { name: "value"; type: "QJSValue" }
    Method {
    name: "trigger"
    Parameter { name: "value"; type: "QVariant" }
    Property { name: "style"; type: "QQmlComponent"; isPointer: true }
    Property { name: "__styleInstance"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Method {
    name: "requestFocus"
    Parameter { name: "reason"; type: "Qt::FocusReason" }
    Method { name: "requestFocus"; revision: 1; type: "bool" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components.Internals/TextInputPopover"
    exports: ["Ubuntu.Components.Internals/TextInputPopover 0.1"]
    Property { name: "target"; type: "QQuickItem"; isPointer: true }
    Property { name: "actions"; type: "UCAction"; isList: true; isReadonly: true }
    Property { name: "caller"; type: "QQuickItem"; isPointer: true }
    Property { name: "pointerTarget"; type: "QQuickItem"; isPointer: true }
    Property { name: "edgeMargins"; type: "double" }
    Property { name: "callerMargin"; type: "double" }
    Property { name: "autoClose"; type: "bool" }
    Property { name: "container"; type: "QObject"; isList: true; isReadonly: true }
    Property { name: "contentWidth"; type: "double" }
    Property { name: "contentHeight"; type: "double" }
    Property { name: "foregroundStyle"; type: "QQmlComponent"; isPointer: true }
    Method { name: "show"; type: "QVariant" }
    Method { name: "hide"; type: "QVariant" }
    Method { name: "__makeInvisible"; type: "QVariant" }
    Property { name: "dismissArea"; type: "QQuickItem"; isPointer: true }
    Property { name: "grabDismissAreaEvents"; type: "bool" }
    Property { name: "fadingAnimation"; type: "QQuickPropertyAnimation"; isPointer: true }
    Property { name: "__foreground"; type: "QQuickItem"; isPointer: true }
    Property { name: "__closeOnDismissAreaPress"; type: "bool" }
    Property { name: "__dimBackground"; type: "bool" }
    Property {
    name: "__eventGrabber"
    Method { name: "__closeIfHidden"; type: "QVariant" }
    Method { name: "__closePopup"; type: "QVariant" }
    Property { name: "automaticOrientation"; type: "bool" }
    Property { name: "transitionEnabled"; type: "bool" }
    Property { name: "orientationAngle"; type: "int" }
    Property { name: "anchorToKeyboard"; type: "bool" }
    Property { name: "rotating"; type: "bool"; isReadonly: true }
    Property { name: "__orientationAngle"; type: "int" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components.Internals/Toolbar"
    exports: ["Ubuntu.Components.Internals/Toolbar 0.1"]
    Property { name: "tools"; type: "QQuickItem"; isPointer: true }
    Property { name: "align"; type: "int" }
    Property { name: "opened"; type: "bool" }
    Property { name: "locked"; type: "bool" }
    Property { name: "hintSize"; type: "double" }
    Property { name: "triggerSize"; type: "double" }
    Property { name: "animate"; type: "bool" }
    Property { name: "animating"; type: "bool"; isReadonly: true }
    Property { name: "__closeOnContentsClicks"; type: "bool" }
    Property { name: "__openOnHover"; type: "bool" }
    Property { name: "contents"; type: "QObject"; isList: true; isReadonly: true }
    Property { name: "hideTimeout"; type: "int" }
    Property { name: "position"; type: "double"; isReadonly: true }
    Property { name: "pressed"; type: "bool"; isReadonly: true }
    Method { name: "open"; type: "QVariant" }
    Method { name: "close"; type: "QVariant" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components/ToolbarButton"
    exports: ["ToolbarButton 1.0"]
    Property { name: "action"; type: "UCAction"; isPointer: true }
    Property { name: "text"; type: "string" }
    Property { name: "iconSource"; type: "QUrl" }
    Property { name: "iconName"; type: "string" }
    Signal {
    name: "triggered"
    Parameter { name: "value"; type: "QJSValue" }
    Method {
    name: "trigger"
    Parameter { name: "value"; type: "QVariant" }
    Property { name: "style"; type: "QQmlComponent"; isPointer: true }
    Property { name: "__styleInstance"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    Property { name: "activeFocusOnPress"; revision: 1; type: "bool" }
    Method {
    name: "requestFocus"
    Parameter { name: "reason"; type: "Qt::FocusReason" }
    Method { name: "requestFocus"; revision: 1; type: "bool" }
    prototype: "QQuickItem"
    name: "Ubuntu.Components/ToolbarItems"
    exports: ["ToolbarItems 1.0"]
    Property { name: "back"; type: "QQuickItem"; isPointer: true }
    Property { name: "pageStack"; type: "QQuickItem"; isPointer: true }
    Property { name: "opened"; type: "bool" }
    Property { name: "locked"; type: "bool" }
    Property { name: "contents"; type: "QObject"; isList: true; isReadonly: true }
    prototype: "QObject"
    name: "Ubuntu.Components/UbuntuColors"
    exports: ["UbuntuColors 1.1"]
    Property { name: "orange"; type: "QColor"; isReadonly: true }
    Property { name: "lightAubergine"; type: "QColor"; isReadonly: true }
    Property { name: "midAubergine"; type: "QColor"; isReadonly: true }
    Property { name: "darkAubergine"; type: "QColor"; isReadonly: true }
    Property { name: "warmGrey"; type: "QColor"; isReadonly: true }
    Property { name: "coolGrey"; type: "QColor"; isReadonly: true }
    Property { name: "orangeGradient"; type: "QQuickGradient"; isPointer: true }
    Property { name: "greyGradient"; type: "QQuickGradient"; isPointer: true }
    Property { name: "lightGrey"; type: "QColor"; isReadonly: true }
    Property { name: "darkGrey"; type: "QColor"; isReadonly: true }
    Property { name: "red"; type: "QColor"; isReadonly: true }
    Property { name: "green"; type: "QColor"; isReadonly: true }
    Property { name: "blue"; type: "QColor"; isReadonly: true }
    Property { name: "purple"; type: "QColor"; isReadonly: true }
    prototype: "QQuickListView"
    name: "Ubuntu.Components/UbuntuListView"
    exports: ["UbuntuListView 1.1"]
    Property {
    name: "pullToRefresh"
    Property { name: "expandedIndex"; type: "int" }
    prototype: "QQuickNumberAnimation"
    name: "Ubuntu.Components/UbuntuNumberAnimation"
    exports: ["UbuntuNumberAnimation 1.0"]
    name: "ULConditionalLayout"
    prototype: "QObject"
    exports: ["ConditionalLayout 0.1", "ConditionalLayout 1.0"]
    Property { name: "name"; type: "string" }
    Property { name: "when"; type: "QQmlBinding"; isPointer: true }
    Property { name: "layout"; type: "QQmlComponent"; isPointer: true }
    name: "ULItemLayout"
    prototype: "QQuickItem"
    exports: ["ItemLayout 0.1", "ItemLayout 1.0"]
    Property { name: "item"; type: "string" }
    name: "ULLayouts"
    prototype: "QQuickItem"
    exports: ["Layouts 0.1", "Layouts 1.0"]
    Property { name: "currentLayout"; type: "string"; isReadonly: true }
    Property { name: "layouts"; type: "ULConditionalLayout"; isList: true; isReadonly: true }
    Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    Property { name: "children"; type: "QQuickItem"; isList: true; isReadonly: true }
    name: "ULLayoutsAttached"
    prototype: "QObject"
    Property { name: "item"; type: "string" }
    name: "UPMCpuUsage"
    prototype: "QQuickItem"
    exports: ["CpuUsage 0.1", "CpuUsage 1.0"]
    Property { name: "graphModel"; type: "UPMGraphModel"; isReadonly: true; isPointer: true }
    Property { name: "period"; type: "int" }
    Property { name: "samplingInterval"; type: "int" }
    name: "UPMGraphModel"
    prototype: "QObject"
    Property { name: "image"; type: "QImage"; isReadonly: true }
    Property { name: "shift"; type: "int"; isReadonly: true }
    Property { name: "samples"; type: "int" }
    Property { name: "currentValue"; type: "int"; isReadonly: true }
    name: "UPMRenderingTimes"
    prototype: "QQuickItem"
    exports: ["RenderingTimes 0.1", "RenderingTimes 1.0"]
    Property { name: "period"; type: "int" }
    Property { name: "samples"; type: "int" }
    Property { name: "graphModel"; type: "UPMGraphModel"; isReadonly: true; isPointer: true }
    Property { name: "timerType"; type: "RenderTimer::TimerType" }
    Signal {
    name: "frameRendered"
    Parameter { name: "renderTime"; type: "qlonglong" }
    name: "UPMTextureFromImage"
    prototype: "QQuickItem"
    exports: ["TextureFromImage 0.1", "TextureFromImage 1.0"]
    Property { name: "image"; type: "QImage" }
    name: "UCTestExtras"
    prototype: "QObject"
    exports: ["TestExtras 1.0"]
    Property { name: "touchPresent"; type: "bool"; isReadonly: true }
    Method { name: "touchDevicePresent"; type: "bool" }
    Method { name: "registerTouchDevice" }
    Method {
    name: "touchPress"
    Parameter { name: "touchId"; type: "int" }
    Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
    Parameter { name: "point"; type: "QPoint" }
    Method {
    name: "touchRelease"
    Parameter { name: "touchId"; type: "int" }
    Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
    Parameter { name: "point"; type: "QPoint" }
    Method {
    name: "touchClick"
    Parameter { name: "touchId"; type: "int" }
    Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
    Parameter { name: "point"; type: "QPoint" }
    Method {
    name: "touchLongPress"
    Parameter { name: "touchId"; type: "int" }
    Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
    Parameter { name: "point"; type: "QPoint" }
    Method {
    name: "touchDoubleClick"
    Parameter { name: "touchId"; type: "int" }
    Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
    Parameter { name: "point"; type: "QPoint" }
    Method {
    name: "touchMove"
    Parameter { name: "touchId"; type: "int" }
    Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
    Parameter { name: "point"; type: "QPoint" }
    Method {
    name: "touchDrag"
    Parameter { name: "touchId"; type: "int" }
    Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
    Parameter { name: "from"; type: "QPoint" }
    Parameter { name: "delta"; type: "QPoint" }
    Parameter { name: "steps"; type: "int" }
    Method {
    name: "touchDrag"
    Parameter { name: "touchId"; type: "int" }
    Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
    Parameter { name: "from"; type: "QPoint" }
    Parameter { name: "delta"; type: "QPoint" }
